---
- name: Install packages
  ansible.builtin.apt:
    name: "{{ k3s_master_packages }}"
    update_cache: true
    state: present

- name: Setup Helm repo
  ansible.builtin.include_tasks: setup_helm_repo.yml

- name: Detect if multiple masters (HA) are defined
  ansible.builtin.set_fact:
    k3s_ha: true
  when:
    - groups['k3s_master'] is defined
    - groups['k3s_master'] | length > 1

- name: Set first master ip
  ansible.builtin.set_fact:
    k3s_first_ip: "{{ hostvars[groups['k3s_master'][0]]['ansible_host'] }}"

- name: Create K3s configuration directory
  ansible.builtin.file:
    path: "{{ k3s_config_dir }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Copy K3s token file
  ansible.builtin.copy:
    content: "{{ k3s_token }}"
    dest: "{{ k3s_token_file }}"
    owner: root
    group: root
    mode: "0600"

- name: Copy K3s configuration file
  ansible.builtin.template:
    src: "templates/config.yaml.j2"
    dest: "{{ k3s_config_file }}"
    owner: root
    group: root
    mode: "0644"

- name: Get K3s installed version
  ansible.builtin.command: k3s --version
  register: k3s_version_output
  changed_when: false
  ignore_errors: true

- name: Set K3s installed version
  when: k3s_version_output.rc == 0
  ansible.builtin.set_fact:
    k3s_installed_version: "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"

- name: Create .kube directory
  ansible.builtin.file:
    path: ~{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: "0750"

- name: Install or update K3s
  when: k3s_version_output.rc != 0 or k3s_installed_version is version(k3s_version, '<')
  block:
    - name: Download K3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io/
        dest: /usr/local/bin/k3s-install.sh
        owner: root
        group: root
        mode: "0755"
        timeout: 120

    - name: Run K3s install script
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-install.sh
      environment:
        INSTALL_K3S_SKIP_START: "true"
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
      changed_when: true

    - name: Enable K3s service
      ansible.builtin.systemd:
        name: k3s
        state: stopped
        enabled: true
        daemon_reload: true

- name: Bootstrap cluster on first master
  when: inventory_hostname == groups['k3s_master'][0]
  ansible.builtin.include_tasks: bootstrap.yml

- name: Start other master node
  when: k3s_ha and inventory_hostname != groups['k3s_master'][0]
  ansible.builtin.systemd:
    name: k3s
    state: restarted
    enabled: true
    daemon_reload: true

- name: Setup kubectl
  ansible.builtin.include_tasks: setup_kubectl.yml

- name: Make cluster available locally
  when: inventory_hostname == groups['k3s_master'][0]
  block:
    - name: Fetch .kube config file
      become: true
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "~/.kube/config"
        flat: true

    - name: Change server address in .kube config to vip
      delegate_to: localhost
      become: false
      ansible.builtin.shell: |
        KUBECONFIG=~/.kube/config kubectl config set-cluster default --server=https://{{ k3s_api_vip }}:{{ k3s_api_port }}
      register: setup_kubectl_output
      changed_when: setup_kubectl_output.rc != 0
