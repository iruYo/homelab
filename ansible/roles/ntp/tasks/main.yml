---
- name: Install requirements
  ansible.builtin.apt:
    name:
      - pps-tools
      - gpsd
      - gpsd-clients
      - setserial
      - chrony
      - linuxptp
    state: present
    update_cache: true

- name: "Adjust config.txt for GPS HAT"
  ansible.builtin.lineinfile:
    dest: /boot/firmware/config.txt
    regexp: "^{{ item }}"
    line: '{{ item }}'
  notify: Reboot
  with_items:
    - "dtoverlay=pps-gpio,gpiopin=18,capture_clear"
    - "dtoverlay=disable-bt"
    - "dtoverlay=disable-wifi"
    - "dtparam=uart0=on"
    - "dtparam=rtc=off"
    - "enable_uart=1"

- name: Ensure dynamic tics are disabled in cmdline.txt
  ansible.builtin.replace:
    path: /boot/firmware/cmdline.txt
    regexp: '^([\w](?!.*\bnohz=off\b).*)$'
    replace: '\1 nohz=off'
  notify: Reboot

- name: Ensure no console in cmdline.txt
  ansible.builtin.replace:
    path: /boot/firmware/cmdline.txt
    regexp: '^(.*)\b({{ item }})\b(\s+)?(.*)$'
    replace: '\1 \4'
  notify: Reboot
  with_items:
    - "console=serial0,[0-9]+"
    - "console=ttyAMA0,[0-9]+"

- name: "Add pps-gpio to modules"
  ansible.builtin.lineinfile:
    dest: /etc/modules
    regexp: "^pps-gpio"
    line: 'pps-gpio'
  notify: Reboot

- name: Disable hciuart service
  ansible.builtin.service:
    name: hciuart
    state: stopped
    enabled: false

- name: Setup gpsd
  ansible.builtin.include_tasks: gpsd.yml

- name: Setup chrony
  ansible.builtin.include_tasks: chrony.yml

- name: Start gpsd
  ansible.builtin.service:
    name: gpsd
    state: restarted

- name: Setup satpulse
  ansible.builtin.include_tasks: satpulse.yml
  when: ntp_satpulse_enabled

- name: Copy grandmaster ptp configuration
  ansible.builtin.copy:
    src: ptp-gm.conf
    dest: /etc/ptp4-gm.conf
    owner: root
    group: root
    mode: "0644"
  notify: Reboot

- name: Setup coalesce service, if possible
  block:
    - name: Fetch data from ethtool
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          ethtool -c eth0 | sed -nr "s/^{{ item }}:[[:space:]](.+)/\1/p"
      loop:
        - rx-usecs
        - tx-usecs
      register: ntp_coalesce_usecs
      changed_when: false

    - name: Set rx_usecs and tx_usecs facts
      ansible.builtin.set_fact:
        ntp_rx_usecs: "{{ (ntp_coalesce_usecs.results | selectattr('item', '==', 'rx-usecs') | map(attribute='stdout') | list)[0] | default('') }}"
        ntp_tx_usecs: "{{ (ntp_coalesce_usecs.results | selectattr('item', '==', 'tx-usecs') | map(attribute='stdout') | list)[0] | default('') }}"

    - name: Copy coalesce service configuration
      ansible.builtin.template:
        src: "ptp_nic_coalesce.service.j2"
        dest: /etc/systemd/system/ptp_nic_coalesce.service
        owner: root
        group: root
        mode: "0755"
      when: ntp_rx_usecs != "n/a" or ntp_tx_usecs != "n/a"
      notify: Reboot

    - name: Reload coalesce service
      ansible.builtin.systemd_service:
        name: ptp_nic_coalesce.service
        state: reloaded
        enabled: true
        daemon_reload: true

- name: Setup grandmaster services
  ansible.builtin.include_role:
    name: common
    tasks_from: setup_service
  loop:
    - ptp4l-gm
    - phc2sys-gm
  loop_control:
    loop_var: service_name
